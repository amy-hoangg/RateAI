import { ParameterReducer, ParsedString } from '.';
export declare function flag<TName extends string>(keys: string[], name: TName): ParameterReducer<{
    [name in TName]: boolean;
}>;
export declare function parsedString<TName extends string, TParsed>(keys: string[], name: TName, parse: (value: string, key: string) => ParsedString<TParsed>): ParameterReducer<{
    [name in TName]: TParsed;
}>;
export declare function parsedStringList<TName extends string, TParsed>(keys: string[], name: TName, parse: (value: string, key: string) => ParsedString<TParsed>): ParameterReducer<{
    [name in TName]: TParsed[];
}>;
export declare function string<TName extends string>(keys: string[], name: TName): ParameterReducer<{
    [name in TName]: string;
}>;
export declare function stringList<TName extends string>(keys: string[], name: TName): ParameterReducer<{
    [name in TName]: string[];
}>;
export declare function enumString<TName extends string, TValues extends readonly [string, ...string[]]>(keys: string[], name: TName, values: TValues): ParameterReducer<{
    [name in TName]: TValues[number];
}>;
export declare function enumString<TName extends string>(keys: string[], name: TName, values: readonly string[]): ParameterReducer<{
    [name in TName]: string;
}>;
export declare function integer<TName extends string>(keys: string[], name: TName): ParameterReducer<{
    [name in TName]: number;
}>;
export declare function parsedPositionalString<TName extends string, TParsed>(name: TName, parse: (value: string) => undefined | ParsedString<TParsed>): ParameterReducer<{
    [name in TName]: TParsed;
}>;
export declare function positionalString<TName extends string>(name: TName): ParameterReducer<{ [name in TName]: string; }>;
export declare function parsedPositionalStringList<TName extends string, TParsed>(name: TName, parse: (value: string) => undefined | ParsedString<TParsed>, options?: {
    eager?: boolean;
}): ParameterReducer<{
    [name in TName]: TParsed[];
}>;
export declare function positionalStringList<TName extends string>(name: TName, options?: {
    eager?: boolean;
}): ParameterReducer<{ [name in TName]: string[]; }>;
export declare function positionalEnumString<TName extends string, TValues extends readonly [string, ...string[]]>(name: TName, values: TValues): ParameterReducer<{
    [name in TName]: TValues[number];
}>;
export declare function positionalEnumString<TName extends string>(name: TName, values: readonly string[]): ParameterReducer<{
    [name in TName]: string;
}>;
