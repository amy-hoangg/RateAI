"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = exports.invalid = exports.valid = exports.startChain = exports.param = void 0;
const param = __importStar(require("./parameters"));
exports.param = param;
var chain_1 = require("./chain");
Object.defineProperty(exports, "startChain", { enumerable: true, get: function () { return chain_1.startChain; } });
var helpers_1 = require("./helpers");
Object.defineProperty(exports, "valid", { enumerable: true, get: function () { return helpers_1.valid; } });
Object.defineProperty(exports, "invalid", { enumerable: true, get: function () { return helpers_1.invalid; } });
function extractReason() {
    console.error(`ðŸš¨ ${this.reason}`);
    process.exit(1);
}
function extractResult() {
    if (this.rest.length) {
        console.error(`ðŸš¨ Unrecognized option ${this.rest[0]}.`);
        process.exit(1);
    }
    return this.parsed;
}
function parse(parameters, input) {
    let rest = input;
    let parsed = {};
    while (rest.length) {
        const result = parameters(rest, parsed);
        if (result === undefined) {
            break;
        }
        if (result.valid) {
            rest = result.rest;
            parsed = result.parsed;
        }
        else {
            return {
                ...result,
                extract: extractReason,
            };
        }
    }
    return {
        valid: true,
        rest,
        parsed,
        extract: extractResult,
    };
}
exports.parse = parse;
//# sourceMappingURL=index.js.map