import PrintOptions from './PrintOptions';
import FileName from './FileName';
import IdentifierName from './IdentifierName';
export interface FileContext {
    getImport: (fileExport: FileExport) => string;
}
export interface FileExport {
    mode: 'type' | 'value';
    file: FileName;
    isDefaultExport: () => boolean;
    exportName: string;
}
export default class PrintContext<TypeID> {
    private readonly _files;
    private readonly _rawFiles;
    readonly options: PrintOptions<TypeID>;
    constructor(options: PrintOptions<TypeID>);
    private _pushDeclaration;
    pushTypeDeclaration(id: TypeID, declaration: (identifier: IdentifierName, imp: FileContext) => string[]): FileExport;
    pushReExport(id: TypeID, from: FileExport): void;
    pushValueDeclaration(id: TypeID, declaration: (identifier: IdentifierName, imp: FileContext) => string[]): FileExport;
    writeFile(filename: FileName, content: string): void;
    getFiles(): {
        filename: FileName;
        content: string;
    }[];
}
