"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pg_1 = require("@databases/pg");
const pg_cluster_1 = require("@databases/pg-cluster");
const __1 = require("..");
const SCHEMA_NAME = 'typed_cluster_queries_tests';
const TABLE_NAME = 'users';
const { users } = (0, __1.default)({
    schemaName: SCHEMA_NAME,
});
let primaryQueries = [];
let replicaQueries = [];
const primary = (0, pg_1.default)({
    bigIntMode: 'number',
    onQueryStart(_q, q) {
        primaryQueries.push({
            text: q.text.split(`"${SCHEMA_NAME}".`).join(``),
            values: q.values.map((v) => (Array.isArray(v) ? JSON.stringify(v) : v)),
        });
    },
});
const replica = (0, pg_1.default)({
    bigIntMode: 'number',
    onQueryStart(_q, q) {
        replicaQueries.push({
            text: q.text.split(`"${SCHEMA_NAME}".`).join(``),
            values: q.values.map((v) => (Array.isArray(v) ? JSON.stringify(v) : v)),
        });
    },
});
const cluster = (0, pg_cluster_1.default)(primary, [replica]);
beforeEach(() => {
    primaryQueries = [];
    replicaQueries = [];
});
afterAll(async () => {
    await primary.dispose();
    await replica.dispose();
});
test('create schema', async () => {
    await cluster.query((0, pg_1.sql) `CREATE SCHEMA ${pg_1.sql.ident(SCHEMA_NAME)}`);
    await cluster.query((0, pg_1.sql) `
      CREATE TABLE ${pg_1.sql.ident(SCHEMA_NAME, TABLE_NAME)} (
        id BIGSERIAL NOT NULL PRIMARY KEY,
        screen_name TEXT UNIQUE NOT NULL,
        bio TEXT,
        age INT,
        created_at TIMESTAMPTZ,
        updated_at TIMESTAMPTZ
      );
    `);
});
test('insert query', async () => {
    await users(cluster).insert({ screen_name: 'John' }, { screen_name: 'Jane' });
    expect(primaryQueries).toHaveLength(1);
    expect(primaryQueries).toContainEqual({
        text: `INSERT INTO "users" ("screen_name") VALUES ($1),($2) RETURNING *`,
        values: ['John', 'Jane'],
    });
    expect(replicaQueries).toHaveLength(0);
});
test('select query', async () => {
    var _a;
    expect((_a = (await users(cluster).find().orderByAsc('screen_name').first())) === null || _a === void 0 ? void 0 : _a.screen_name).toBe('Jane');
    expect(primaryQueries).toHaveLength(0);
    expect(replicaQueries).toHaveLength(1);
    expect(replicaQueries).toContainEqual({
        text: `SELECT * FROM "users" ORDER BY "screen_name" ASC LIMIT $1`,
        values: [1],
    });
});
//# sourceMappingURL=cluster.test.pg.js.map