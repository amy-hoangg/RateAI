"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pg_1 = require("@databases/pg");
const __1 = require("..");
const { users } = (0, __1.default)({ schemaName: 'typed_queries_count' });
const dbNumber = (0, pg_1.default)({ bigIntMode: 'number' });
const dbString = (0, pg_1.default)({ bigIntMode: 'string' });
const dbBigInt = (0, pg_1.default)({ bigIntMode: 'bigint' });
afterAll(async () => {
    await Promise.all([
        dbNumber.dispose(),
        dbString.dispose(),
        dbBigInt.dispose(),
    ]);
});
test('create schema', async () => {
    await dbNumber.query((0, pg_1.sql) `CREATE SCHEMA typed_queries_count`);
    await dbNumber.query((0, pg_1.sql) `
      CREATE TABLE typed_queries_count.users (
        id BIGSERIAL NOT NULL PRIMARY KEY,
        screen_name TEXT UNIQUE NOT NULL,
        bio TEXT,
        age INT,
        created_at TIMESTAMPTZ,
        updated_at TIMESTAMPTZ
      );
    `);
});
test('count users', async () => {
    await users(dbNumber).insert({ screen_name: 'Forbes' }, { screen_name: 'Ellie' });
    expect(await users(dbNumber).count()).toBe(2);
    expect(await users(dbString).count()).toBe(2);
    expect(await users(dbBigInt).count()).toBe(2);
    expect(await users(dbNumber).count({ screen_name: 'Forbes' })).toBe(1);
    expect(await users(dbString).count({ screen_name: 'Forbes' })).toBe(1);
    expect(await users(dbBigInt).count({ screen_name: 'Forbes' })).toBe(1);
});
//# sourceMappingURL=count.test.pg.js.map