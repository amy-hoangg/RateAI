"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const parameter_reducers_1 = require("parameter-reducers");
const isInteractive = require("is-interactive");
const interrogator = require("interrogator");
const chalk = require("chalk");
const pg_schema_introspect_1 = require("@databases/pg-schema-introspect");
const pg_config_1 = require("@databases/pg-config");
const pg_schema_print_types_1 = require("@databases/pg-schema-print-types");
const parameterParser = (0, parameter_reducers_1.startChain)()
    .addParam(parameter_reducers_1.param.string(['-c', '--database'], 'database'))
    .addParam(parameter_reducers_1.param.string(['-d', '--directory'], 'directory'))
    .addParam(parameter_reducers_1.param.string(['--config'], 'configFilename'))
    .addParam(parameter_reducers_1.param.string(['-s', '--schemaName'], 'schemaName'));
async function run(cwd, args) {
    var _a, _b;
    const params = (0, parameter_reducers_1.parse)(parameterParser, args).extract();
    const { connectionStringEnvironmentVariable, types: { directory, ...types }, } = params.configFilename
        ? (0, pg_config_1.readPgConfigSync)((0, path_1.resolve)(cwd, params.configFilename))
        : (0, pg_config_1.getPgConfigSync)(cwd);
    let database = (_a = params.database) !== null && _a !== void 0 ? _a : process.env[connectionStringEnvironmentVariable];
    if (!database) {
        console.error('You must supply a connection string for the database. You can supply it as either:');
        console.error('');
        console.error(` - The environment variable ${chalk.cyan(connectionStringEnvironmentVariable)}`);
        console.error(` - The ${chalk.cyan('--database')} parameter when calling pg-migrations`);
        console.error('');
        if (isInteractive()) {
            database = await interrogator.input('Please enter a connection string:');
        }
    }
    if (!database) {
        return 1;
    }
    const connection = (0, pg_schema_introspect_1.connect)({ connectionString: database, poolSize: 1 });
    let schema;
    try {
        schema = await (0, pg_schema_introspect_1.default)(connection, { schemaName: params.schemaName });
    }
    finally {
        await connection.dispose().catch(() => {
            // ignore the error if it's just disposing the database connection
        });
    }
    await (0, pg_schema_print_types_1.writeSchema)(schema, (0, path_1.resolve)(cwd, (_b = params.directory) !== null && _b !== void 0 ? _b : directory), types);
    return 0;
}
exports.default = run;
//# sourceMappingURL=index.js.map