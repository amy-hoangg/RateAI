"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bulkDelete = exports.bulkUpdate = exports.bulkSelect = exports.bulkCondition = exports.bulkInsert = exports.bulkInsertStatement = void 0;
function tableId(options) {
    const { sql } = options.database;
    return options.schemaName
        ? sql.ident(options.schemaName, options.tableName)
        : sql.ident(options.tableName);
}
function select(columns, records, options) {
    const { database, columnTypes, serializeValue } = options;
    const { sql } = database;
    return sql `SELECT * FROM UNNEST(${sql.join(columns.map(({ name, getValue }) => {
        const typeName = columnTypes[name];
        if (!typeName) {
            throw new Error(`Missing type name for ${name}`);
        }
        return sql `${records.map((r) => {
            const value = getValue ? getValue(r) : r[name];
            return serializeValue ? serializeValue(`${name}`, value) : value;
        })}::${typeName}[]`;
    }), `,`)})`;
}
function bulkInsertStatement(options) {
    const { database, columnsToInsert, records } = options;
    const { sql } = database;
    return sql `INSERT INTO ${tableId(options)} (${sql.join(columnsToInsert.map((columnName) => sql.ident(columnName)), `,`)}) ${select(columnsToInsert.map((name) => ({ name })), records, options)}`;
}
exports.bulkInsertStatement = bulkInsertStatement;
async function bulkInsert(options) {
    const { database, returning } = options;
    const { sql } = database;
    return await database.query(returning
        ? sql `${bulkInsertStatement(options)} RETURNING ${returning}`
        : bulkInsertStatement(options));
}
exports.bulkInsert = bulkInsert;
function bulkCondition(options) {
    const { database, whereColumnNames, whereConditions } = options;
    const { sql } = database;
    return sql `(${sql.join(whereColumnNames.map((columnName) => sql.ident(columnName)), `,`)}) IN (${select(whereColumnNames.map((columnName) => ({ name: columnName })), whereConditions, options)})`;
}
exports.bulkCondition = bulkCondition;
async function bulkSelect(options) {
    const { database, distinctColumnNames, selectColumnNames, orderBy, limit } = options;
    const { sql } = database;
    return await database.query(sql.join([
        sql `SELECT`,
        (distinctColumnNames === null || distinctColumnNames === void 0 ? void 0 : distinctColumnNames.length)
            ? sql `DISTINCT ON (${sql.join(distinctColumnNames.map((columnName) => sql.ident(columnName)), `,`)})`
            : null,
        selectColumnNames
            ? sql.join(selectColumnNames.map((columnName) => sql.ident(columnName)), ',')
            : sql `*`,
        sql `FROM ${tableId(options)} WHERE`,
        bulkCondition(options),
        (orderBy === null || orderBy === void 0 ? void 0 : orderBy.length)
            ? sql `ORDER BY ${sql.join(orderBy.map((q) => q.direction === 'ASC'
                ? sql `${sql.ident(q.columnName)} ASC`
                : sql `${sql.ident(q.columnName)} DESC`), sql `, `)}`
            : null,
        limit ? sql `LIMIT ${limit}` : null,
    ].filter((v) => v !== null), sql ` `));
}
exports.bulkSelect = bulkSelect;
async function bulkUpdate(options) {
    const { database, tableName, whereColumnNames, setColumnNames, updates, returning, } = options;
    const { sql } = database;
    return await database.query(sql `UPDATE ${tableId(options)} SET ${sql.join(setColumnNames.map((columnName) => sql `${sql.ident(columnName)} = ${sql.ident(`bulk_query`, `updated_value_of_${columnName}`)}`), `,`)} FROM (${select([
        ...whereColumnNames.map((columnName) => ({
            name: columnName,
            getValue: (u) => u.where[columnName],
        })),
        ...setColumnNames.map((columnName) => ({
            name: columnName,
            getValue: (u) => u.set[columnName],
        })),
    ], updates, options)} AS bulk_query(${sql.join([
        ...whereColumnNames.map((columnName) => sql.ident(columnName)),
        ...setColumnNames.map((columnName) => sql.ident(`updated_value_of_${columnName}`)),
    ], `,`)})) AS bulk_query WHERE ${sql.join(whereColumnNames.map((columnName) => sql `${sql.ident(tableName, columnName)} = ${sql.ident(`bulk_query`, columnName)}`), ` AND `)}${returning ? sql ` RETURNING ${returning}` : sql ``}`);
}
exports.bulkUpdate = bulkUpdate;
async function bulkDelete(options) {
    const { database } = options;
    const { sql } = database;
    await database.query(sql `DELETE FROM ${tableId(options)} WHERE ${bulkCondition(options)}`);
}
exports.bulkDelete = bulkDelete;
//# sourceMappingURL=index.js.map