import { SQLQuery, Queryable } from '@databases/pg';
declare type ColumnName = string | number | symbol;
export interface BulkOperationOptions<TColumnName extends ColumnName> {
    readonly database: Queryable;
    readonly tableName: string;
    readonly columnTypes: {
        readonly [K in TColumnName]: SQLQuery;
    };
    readonly schemaName?: string;
    readonly serializeValue?: (columnName: string, value: unknown) => unknown;
}
export interface BulkInsertOptions<TColumnToInsert extends ColumnName> extends BulkOperationOptions<TColumnToInsert> {
    readonly columnsToInsert: readonly TColumnToInsert[];
    readonly records: readonly any[];
}
export interface BulkConditionOptions<TWhereColumn extends ColumnName> extends BulkOperationOptions<TWhereColumn> {
    readonly whereColumnNames: readonly TWhereColumn[];
    readonly whereConditions: readonly any[];
}
export interface BulkSelectOptions<TWhereColumn extends ColumnName> extends BulkConditionOptions<TWhereColumn> {
    readonly distinctColumnNames?: readonly string[];
    readonly selectColumnNames?: readonly string[];
    readonly orderBy?: readonly {
        readonly columnName: string;
        readonly direction: 'ASC' | 'DESC';
    }[];
    readonly limit?: number;
}
export interface BulkUpdateOptions<TWhereColumn extends ColumnName, TSetColumn extends ColumnName> extends BulkOperationOptions<TWhereColumn | TSetColumn> {
    readonly whereColumnNames: readonly TWhereColumn[];
    readonly setColumnNames: readonly TSetColumn[];
    readonly updates: readonly {
        readonly where: any;
        readonly set: any;
    }[];
}
export interface BulkDeleteOptions<TWhereColumn extends ColumnName> extends BulkConditionOptions<TWhereColumn> {
}
export declare function bulkInsertStatement<TColumnToInsert extends ColumnName>(options: BulkInsertOptions<TColumnToInsert>): SQLQuery;
export declare function bulkInsert<TColumnToInsert extends ColumnName>(options: BulkInsertOptions<TColumnToInsert> & {
    returning: SQLQuery;
}): Promise<any[]>;
export declare function bulkInsert<TColumnToInsert extends ColumnName>(options: BulkInsertOptions<TColumnToInsert>): Promise<void>;
export declare function bulkCondition<TWhereColumn extends ColumnName>(options: BulkConditionOptions<TWhereColumn>): SQLQuery;
export declare function bulkSelect<TWhereColumn extends ColumnName>(options: BulkSelectOptions<TWhereColumn>): Promise<any[]>;
export declare function bulkUpdate<TWhereColumn extends ColumnName, TSetColumn extends ColumnName>(options: BulkUpdateOptions<TWhereColumn, TSetColumn> & {
    returning: SQLQuery;
}): Promise<any[]>;
export declare function bulkUpdate<TWhereColumn extends ColumnName, TSetColumn extends ColumnName>(options: BulkUpdateOptions<TWhereColumn, TSetColumn>): Promise<void>;
export declare function bulkDelete<TWhereColumn extends ColumnName>(options: BulkDeleteOptions<TWhereColumn>): Promise<void>;
export {};
