"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pg_1 = require("@databases/pg");
const __1 = require("..");
const SCHEMA_NAME = `bulk_utils_test`;
const TABLE_NAME = `users`;
const table = pg_1.sql.ident(SCHEMA_NAME, TABLE_NAME);
let queries = [];
const db = (0, pg_1.default)({
    bigIntMode: 'number',
    onQueryStart(_q, q) {
        queries.push({
            text: q.text.split(`"bulk_utils_test".`).join(``),
            values: q.values.map((v) => Array.isArray(v) ? `Array<${typeof v[0]}>` : v),
        });
    },
});
function expectQueries(fn) {
    return expect((async () => {
        try {
            queries = [];
            await fn();
            return queries;
        }
        catch (ex) {
            console.error(queries);
            throw ex;
        }
    })()).resolves;
}
const options = {
    database: db,
    schemaName: SCHEMA_NAME,
    tableName: TABLE_NAME,
    columnTypes: {
        id: (0, pg_1.sql) `BIGINT`,
        screen_name: (0, pg_1.sql) `TEXT`,
        bio: (0, pg_1.sql) `TEXT`,
        age: (0, pg_1.sql) `INT`,
    },
};
afterAll(async () => {
    await db.dispose();
});
test('create schema', async () => {
    await db.query((0, pg_1.sql) `CREATE SCHEMA ${pg_1.sql.ident(SCHEMA_NAME)}`);
    await db.query((0, pg_1.sql) `
      CREATE TABLE ${table} (
        id BIGSERIAL NOT NULL PRIMARY KEY,
        screen_name TEXT UNIQUE NOT NULL,
        bio TEXT,
        age INT DEFAULT 42
      );
    `);
});
test(`normal hand-coded insert fails for sufficiently many records`, async () => {
    try {
        const names = [];
        for (let i = 0; i < 30000; i++) {
            names.push(`bulk_insert_name_${i}`);
        }
        await db.query((0, pg_1.sql) `INSERT INTO ${table} (screen_name, age, bio) VALUES ${pg_1.sql.join(names.map((n) => (0, pg_1.sql) `(${n}, ${42}, ${`My name is ${n}`})`), `,`)}`);
    }
    catch (ex) {
        expect(ex.message).toMatch(/bind message has \d+ parameter formats but \d+ parameters/);
        return;
    }
    throw new Error(`Expected insert to fail due to having 90,000 parameters.`);
});
test('create users in bulk', async () => {
    const names = [];
    for (let i = 0; i < 50000; i++) {
        names.push(`bulk_insert_name_${i}`);
    }
    await expectQueries(async () => {
        await (0, __1.bulkInsert)({
            ...options,
            columnsToInsert: [`screen_name`, `age`, `bio`],
            records: names.map((n) => ({
                screen_name: n,
                age: 42,
                bio: `My name is ${n}`,
            })),
        });
    }).toEqual([
        {
            text: `INSERT INTO "users" ("screen_name","age","bio") SELECT * FROM UNNEST($1::TEXT[],$2::INT[],$3::TEXT[])`,
            values: ['Array<string>', 'Array<number>', 'Array<string>'],
        },
    ]);
    const records = await db.query((0, pg_1.sql) `SELECT screen_name, age FROM ${table} ORDER BY screen_name ASC`);
    expect(records.map((i) => i.screen_name)).toEqual(names.sort());
    expect(records.map((i) => i.age)).toEqual(names.map(() => 42));
});
test('query users in bulk', async () => {
    await expectQueries(async () => {
        expect(await (0, __1.bulkSelect)({
            ...options,
            whereColumnNames: [`screen_name`, `age`],
            whereConditions: [
                { screen_name: `bulk_insert_name_5`, age: 42 },
                { screen_name: `bulk_insert_name_6`, age: 42 },
                { screen_name: `bulk_insert_name_7`, age: 32 },
            ],
            selectColumnNames: [`screen_name`, `age`, `bio`],
            orderBy: [{ columnName: `screen_name`, direction: `ASC` }],
        })).toEqual([
            {
                screen_name: `bulk_insert_name_5`,
                age: 42,
                bio: `My name is bulk_insert_name_5`,
            },
            {
                screen_name: `bulk_insert_name_6`,
                age: 42,
                bio: `My name is bulk_insert_name_6`,
            },
        ]);
    }).toEqual([
        {
            text: `SELECT "screen_name","age","bio" FROM "users" WHERE ("screen_name","age") IN (SELECT * FROM UNNEST($1::TEXT[],$2::INT[])) ORDER BY "screen_name" ASC`,
            values: ['Array<string>', 'Array<number>'],
        },
    ]);
});
test('update users in bulk', async () => {
    await expectQueries(async () => {
        await (0, __1.bulkUpdate)({
            ...options,
            whereColumnNames: [`screen_name`, `age`],
            setColumnNames: [`age`],
            updates: [
                { where: { screen_name: `bulk_insert_name_10`, age: 42 }, set: { age: 1 } },
                { where: { screen_name: `bulk_insert_name_11`, age: 42 }, set: { age: 2 } },
                { where: { screen_name: `bulk_insert_name_12`, age: 32 }, set: { age: 3 } },
            ],
        });
    }).toEqual([
        {
            text: `UPDATE "users" SET "age" = "bulk_query"."updated_value_of_age" FROM (SELECT * FROM UNNEST($1::TEXT[],$2::INT[],$3::INT[]) AS bulk_query("screen_name","age","updated_value_of_age")) AS bulk_query WHERE "users"."screen_name" = "bulk_query"."screen_name" AND "users"."age" = "bulk_query"."age"`,
            values: ['Array<string>', 'Array<number>', 'Array<number>'],
        },
    ]);
    expect(await db.query((0, pg_1.sql) `SELECT screen_name, age FROM ${table} WHERE screen_name=ANY(${[
        `bulk_insert_name_10`,
        `bulk_insert_name_11`,
        `bulk_insert_name_12`,
    ]}) ORDER BY screen_name ASC`)).toEqual([
        { screen_name: `bulk_insert_name_10`, age: 1 },
        { screen_name: `bulk_insert_name_11`, age: 2 },
        { screen_name: `bulk_insert_name_12`, age: 42 },
    ]);
});
test('delete users in bulk', async () => {
    await expectQueries(async () => {
        await (0, __1.bulkDelete)({
            ...options,
            whereColumnNames: [`screen_name`, `age`],
            whereConditions: [
                { screen_name: `bulk_insert_name_15`, age: 42 },
                { screen_name: `bulk_insert_name_16`, age: 42 },
                { screen_name: `bulk_insert_name_17`, age: 32 },
            ],
        });
    }).toEqual([
        {
            text: `DELETE FROM "users" WHERE ("screen_name","age") IN (SELECT * FROM UNNEST($1::TEXT[],$2::INT[]))`,
            values: ['Array<string>', 'Array<number>'],
        },
    ]);
    expect(await db.query((0, pg_1.sql) `SELECT screen_name, age FROM ${table} WHERE screen_name=ANY(${[
        `bulk_insert_name_15`,
        `bulk_insert_name_16`,
        `bulk_insert_name_17`,
    ]}) ORDER BY screen_name ASC`)).toEqual([{ screen_name: `bulk_insert_name_17`, age: 42 }]);
});
//# sourceMappingURL=index.test.pg.js.map