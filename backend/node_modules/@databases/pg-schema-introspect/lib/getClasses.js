"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.classQuery = void 0;

const pg_1 = require("@databases/pg");

async function getClasses(connection, query) {
  const conditions = classQuery(query);
  const tables = await connection.query(pg_1.sql`
    SELECT
      ns.oid as "schemaID",
      ns.nspname as "schemaName",
      cls.oid as "classID",
      cls.relname as "className",
      cls.relkind as "kind",
      obj_description(cls.oid, 'pg_class') as "comment"
    FROM pg_catalog.pg_class cls
    INNER JOIN pg_catalog.pg_namespace ns
      ON (cls.relnamespace = ns.oid)
    ${conditions.length ? pg_1.sql`WHERE ${pg_1.sql.join(conditions, pg_1.sql` AND `)}` : pg_1.sql``}
    ORDER BY ns.nspname ASC, cls.relname ASC;
  `);
  return tables;
}

exports.default = getClasses;

function classQuery(query) {
  const conditions = [];

  if (query.kind) {
    if (Array.isArray(query.kind)) {
      conditions.push(pg_1.sql`cls.relkind IN (${pg_1.sql.join(query.kind.map(k => pg_1.sql`${k}`), pg_1.sql`, `)})`);
    } else {
      conditions.push(pg_1.sql`cls.relkind = ${query.kind}`);
    }
  }

  if (query.schemaName) {
    conditions.push(pg_1.sql`ns.nspname = ${query.schemaName}`);
  }

  if (query.schemaID) {
    conditions.push(pg_1.sql`ns.oid = ${query.schemaID}`);
  }

  if (query.className) {
    conditions.push(pg_1.sql`cls.relname = ${query.className}`);
  }

  if (query.classID) {
    conditions.push(pg_1.sql`cls.oid = ${query.classID}`);
  }

  return conditions;
}

exports.classQuery = classQuery;