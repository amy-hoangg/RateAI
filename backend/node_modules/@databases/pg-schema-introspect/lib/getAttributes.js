"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const pg_1 = require("@databases/pg");

const getClasses_1 = require("./getClasses");

async function getAttributes(connection, query) {
  const conditions = getClasses_1.classQuery(query);

  if (query.column) {
    conditions.push(pg_1.sql`a.attname = ${query.column}`);
  }

  if (!query.column && !query.includeSystemColumns) {
    conditions.push(pg_1.sql`a.attnum > 0`);
  }

  conditions.push(pg_1.sql`a.attisdropped = false`);
  const attributes = await connection.query(pg_1.sql`
    SELECT
      ns.oid AS "schemaID",
      ns.nspname AS "schemaName",
      cls.oid AS "classID",
      cls.relname AS "className",
      a.attnum as "attributeNumber",
      a.attname AS "attributeName",

      a.attnotnull AS "notNull",
      a.atthasdef AS "hasDefault",
      pg_get_expr(def.adbin, def.adrelid, true) AS "default",
      col_description(a.attrelid, a.attnum) AS "comment",

      a.atttypid AS "typeID",
      a.atttypmod AS "typeLength"
    FROM pg_catalog.pg_attribute a
    INNER JOIN pg_catalog.pg_class cls
      ON (a.attrelid = cls.oid)
    INNER JOIN pg_catalog.pg_namespace ns
      ON (cls.relnamespace = ns.oid)
    LEFT OUTER JOIN pg_catalog.pg_attrdef def -- default values
      ON (def.adrelid = cls.oid AND def.adnum = a.attnum)
    ${conditions.length ? pg_1.sql`WHERE ${pg_1.sql.join(conditions, pg_1.sql` AND `)}` : pg_1.sql``}
    ORDER BY ns.nspname ASC, cls.relname ASC, a.attname ASC;
  `);
  return attributes;
}

exports.default = getAttributes;