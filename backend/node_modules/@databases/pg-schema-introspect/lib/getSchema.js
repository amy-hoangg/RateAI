"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sql = exports.connect = void 0;

const pg_1 = require("@databases/pg");

exports.connect = pg_1.default;
Object.defineProperty(exports, "sql", {
  enumerable: true,
  get: function () {
    return pg_1.sql;
  }
});

const ClassKind_1 = require("./enums/ClassKind");

const getAttributes_1 = require("./getAttributes");

const getClasses_1 = require("./getClasses");

const getConstraints_1 = require("./getConstraints");

const getSchemaName_1 = require("./getSchemaName");

const getSearchPath_1 = require("./getSearchPath");

const getTypes_1 = require("./getTypes");

async function getSchema(connection, query = {}) {
  const schemaName = query.schemaName ? query.schemaName : query.schemaID ? await getSchemaName_1.default(connection, query.schemaID) : (await getSearchPath_1.default(connection))[0];

  if (!schemaName) {
    throw new Error('No schema found');
  }

  const [types, classes, allAttributes, allConstraints] = await Promise.all([getTypes_1.default(connection, {
    schemaName
  }), getClasses_1.default(connection, {
    schemaName,
    kind: [ClassKind_1.default.OrdinaryTable, ClassKind_1.default.View, ClassKind_1.default.MaterializedView]
  }), getAttributes_1.default(connection, {
    schemaName
  }), getConstraints_1.default(connection, {
    schemaName
  })]);
  return {
    types,
    classes: classes.map(cls => ({ ...cls,
      attributes: allAttributes.filter(att => att.classID === cls.classID),
      constraints: allConstraints.filter(con => con.classID === cls.classID)
    }))
  };
}

exports.default = getSchema;