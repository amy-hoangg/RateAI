"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_never_1 = require("assert-never");
const pg_config_1 = require("@databases/pg-config");
class PgPrintOptions {
    constructor(config) {
        this._config = config;
    }
    _v(key) {
        var _a;
        return (_a = this._config[key]) !== null && _a !== void 0 ? _a : pg_config_1.DEFAULT_CONFIG.types[key];
    }
    getSchemaJsonFileName() {
        if (this._config.schemaJsonFileName !== undefined) {
            return this._config.schemaJsonFileName;
        }
        else {
            return pg_config_1.DEFAULT_CONFIG.types.schemaJsonFileName;
        }
    }
    get domainTypeMode() {
        return this._v('domainTypeMode');
    }
    get enumTypeMode() {
        return this._v('enumTypeMode');
    }
    get primaryKeyTypeMode() {
        return this._v('primaryKeyTypeMode');
    }
    get columnTypeOverrides() {
        return this._v('columnTypeOverrides');
    }
    get typeOverrides() {
        return this._v('typeOverrides');
    }
    getExportPriority(id) {
        switch (id.type) {
            case 'schema':
                return 0;
            case 'class':
                return 2;
            case 'insert_parameters':
            case 'primary_key':
            case 'enum':
            case 'domain':
                return 3;
            case 'serializeValue':
                return 4;
            case 're_export':
                return 5;
        }
    }
    getExportNameTemplate(id) {
        switch (id.type) {
            case 'schema':
                return this._v('schemaTypeName');
            case 'class':
                return this._v('tableTypeName');
            case 'insert_parameters':
                return this._v('tableInsertParametersTypeName');
            case 'primary_key':
                return this._v('primaryKeyTypeName');
            case 'enum':
                return this._v('enumTypeName');
            case 'domain':
                return this._v('domainTypeName');
            case 'serializeValue':
                return this._v('serializeValueTypeName');
            case 're_export':
                return this.getExportNameTemplate(id.of);
        }
    }
    getFilenameTemplate(id) {
        var _a, _b;
        switch (id.type) {
            case 'schema':
                return this._v('schemaFileName');
            case 'class':
                return this._v('tableFileName');
            case 'insert_parameters':
                return this._v('tableInsertParametersFileName');
            case 'primary_key':
                return this._v('primaryKeyFileName');
            case 'enum':
                return this._v('enumFileName');
            case 'domain':
                return this._v('domainFileName');
            case 'serializeValue':
                return this._v('serializeValueFileName');
            case 're_export':
                switch (id.of.type) {
                    case 'class': {
                        if (this._config.tableReExportFileName === null) {
                            return this.getFilenameTemplate(id.of);
                        }
                        return ((_a = this._v('tableReExportFileName')) !== null && _a !== void 0 ? _a : this.getFilenameTemplate(id.of));
                    }
                    case 'insert_parameters':
                        if (this._config.tableInsertParametersReExportFileName === null) {
                            return this.getFilenameTemplate(id.of);
                        }
                        return ((_b = this._v('tableInsertParametersReExportFileName')) !== null && _b !== void 0 ? _b : this.getFilenameTemplate(id.of));
                    default:
                        return (0, assert_never_1.default)(id.of);
                }
        }
    }
    getTemplateValues(id) {
        switch (id.type) {
            case 'schema':
            case 'serializeValue':
                return {};
            case 'class':
            case 'insert_parameters':
                return { TABLE_NAME: id.name };
            case 'primary_key':
                return {
                    TABLE_NAME: id.name,
                    COLUMN_NAME: id.columnName,
                };
            case 'enum':
            case 'domain':
                return { TYPE_NAME: id.name };
            case 're_export':
                return this.getTemplateValues(id.of);
        }
    }
}
exports.default = PgPrintOptions;
//# sourceMappingURL=PgPrintOptions.js.map