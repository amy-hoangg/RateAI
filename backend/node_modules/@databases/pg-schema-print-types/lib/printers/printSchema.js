"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pg_schema_introspect_1 = require("@databases/pg-schema-introspect");
const pg_data_type_id_1 = require("@databases/pg-data-type-id");
const printClassDetails_1 = require("./printClassDetails");
function printSchema(schema, context) {
    context.printer.pushTypeDeclaration({ type: 'schema' }, (identifier, { getImport }) => [
        `interface ${identifier} {`,
        ...schema.classes
            .filter((cls) => cls.kind === pg_schema_introspect_1.ClassKind.OrdinaryTable)
            .map((cls) => {
            const { DatabaseRecord, InsertParameters } = (0, printClassDetails_1.default)(cls, context);
            return `  ${cls.className}: {record: ${getImport(DatabaseRecord)}, insert: ${getImport(InsertParameters)}};`;
        }),
        `}`,
    ]);
    context.printer.pushValueDeclaration({ type: 'serializeValue' }, (identifier) => {
        const tables = schema.classes
            .filter((cls) => cls.kind === pg_schema_introspect_1.ClassKind.OrdinaryTable)
            .map((cls) => {
            const jsonAttributes = cls.attributes
                .filter((a) => a.typeID === pg_data_type_id_1.default.json ||
                a.typeID === pg_data_type_id_1.default.jsonb)
                .map((a) => a.attributeName);
            return {
                tableName: cls.className,
                jsonAttributes,
            };
        })
            .filter((table) => table.jsonAttributes.length > 0);
        if (!tables.length) {
            return [
                `function ${identifier}(_tableName: string, _columnName: string, value: unknown): unknown {`,
                `  return value;`,
                `}`,
            ];
        }
        const columnCondition = (columns) => columns.length === 0
            ? `false`
            : columns.length === 1
                ? `c === ${JSON.stringify(columns[0])}`
                : `(${columns
                    .map((columnName) => `c === ${JSON.stringify(columnName)}`)
                    .join(' || ')})`;
        const tableConditions = tables.map(({ tableName, jsonAttributes }) => `t === ${JSON.stringify(tableName)} && ${columnCondition(jsonAttributes)}`);
        return [
            `/**`,
            ` * JSON serialize values (v) if the table name (t) and column name (c)`,
            ` * is a JSON or JSONB column.`,
            ` * This is necessary if you want to store values that are not plain objects`,
            ` * in a JSON or JSONB column.`,
            ` */`,
            `function ${identifier}(t: string, c: string, v: unknown): unknown {`,
            `  if (${tableConditions.length === 1
                ? tableConditions[0]
                : `\n    ${tableConditions
                    .map((c) => `(${c})`)
                    .join(' ||\n    ')}\n  `}) {`,
            `    return JSON.stringify(v);`,
            `  }`,
            `  return v;`,
            `}`,
        ];
    });
    const typeAliases = new Map([
        [`INT2`, `SMALLINT`],
        [`INT4`, `INTEGER`],
        [`INT8`, `BIGINT`],
    ]);
    const types = new Map([
        ...Object.entries(pg_data_type_id_1.default)
            .map(([typeName, typeId]) => typeof typeId === 'number' ? [typeId, typeName] : null)
            .filter((v) => v !== null),
        ...schema.types.map((t) => [t.typeID, t.typeName]),
    ]
        .map(([typeId, typeName]) => [typeId, typeName.toUpperCase().replace(/^_(.*)$/, `$1[]`)])
        .map(([typeId, typeName]) => {
        var _a, _b;
        return [
            typeId,
            typeName.endsWith(`[]`)
                ? `${(_a = typeAliases.get(typeName.substring(0, typeName.length - `[]`.length))) !== null && _a !== void 0 ? _a : typeName.substring(0, typeName.length - `[]`.length)}[]`
                : (_b = typeAliases.get(typeName)) !== null && _b !== void 0 ? _b : typeName,
        ];
    }));
    const schemaJsonFileName = context.options.getSchemaJsonFileName();
    if (schemaJsonFileName) {
        const schemaJson = schema.classes
            .filter((cls) => cls.kind === pg_schema_introspect_1.ClassKind.OrdinaryTable)
            .map((table) => ({
            name: table.className,
            columns: table.attributes.map((column) => {
                var _a;
                const typeName = (_a = types.get(column.typeID)) !== null && _a !== void 0 ? _a : null;
                return {
                    name: column.attributeName,
                    isNullable: !column.notNull,
                    hasDefault: column.hasDefault,
                    typeId: column.typeID,
                    typeName: typeName,
                };
            }),
        }));
        context.printer.writeFile(schemaJsonFileName, JSON.stringify(schemaJson, null, `  `) + `\n`);
    }
}
exports.default = printSchema;
//# sourceMappingURL=printSchema.js.map