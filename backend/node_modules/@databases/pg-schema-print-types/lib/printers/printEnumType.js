"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnumTypeMode = void 0;
var EnumTypeMode;
(function (EnumTypeMode) {
    EnumTypeMode[EnumTypeMode["EnumType"] = 0] = "EnumType";
    EnumTypeMode[EnumTypeMode["UnionAlias"] = 1] = "UnionAlias";
    EnumTypeMode[EnumTypeMode["UnionAliasWithObject"] = 2] = "UnionAliasWithObject";
    EnumTypeMode[EnumTypeMode["Inline"] = 3] = "Inline";
})(EnumTypeMode = exports.EnumTypeMode || (exports.EnumTypeMode = {}));
function printEnumType(type, context, file) {
    switch (context.options.enumTypeMode) {
        case 'enum':
            return file.getImport(context.printer.pushValueDeclaration({ type: 'enum', name: type.typeName }, (identifierName) => [
                `enum ${identifierName} {`,
                ...type.values.map((value) => `  ${value} = '${value}',`),
                `}`,
            ]));
        case 'union_alias':
            return file.getImport(context.printer.pushTypeDeclaration({ type: 'enum', name: type.typeName }, (identifierName) => [`type ${identifierName} = ${getUnion(type)};`]));
        case 'union_alias_with_object':
            return file.getImport(context.printer.pushValueDeclaration({ type: 'enum', name: type.typeName }, (identifierName) => [
                `type ${identifierName} = ${getUnion(type)};`,
                `const ${identifierName} = {`,
                ...type.values.map((value) => `  ${value}: '${value}',`),
                `} as const;`,
            ]));
        case 'inline':
            return getUnion(type);
    }
}
exports.default = printEnumType;
function getUnion(type) {
    return type.values.map((v) => `'${v}'`).join(' | ');
}
//# sourceMappingURL=printEnumType.js.map