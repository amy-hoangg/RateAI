"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainTypeMode = void 0;
const pg_config_1 = require("@databases/pg-config");
var DomainTypeMode;
(function (DomainTypeMode) {
    DomainTypeMode[DomainTypeMode["StrictBrand"] = 0] = "StrictBrand";
    DomainTypeMode[DomainTypeMode["LooseBrand"] = 1] = "LooseBrand";
    DomainTypeMode[DomainTypeMode["Alias"] = 2] = "Alias";
    DomainTypeMode[DomainTypeMode["Inline"] = 3] = "Inline";
})(DomainTypeMode = exports.DomainTypeMode || (exports.DomainTypeMode = {}));
function printDomainType(type, context, file) {
    switch (context.options.domainTypeMode) {
        case pg_config_1.PgTypesDomainTypeMode.strict_brand:
        case pg_config_1.PgTypesDomainTypeMode.loose_brand:
        case pg_config_1.PgTypesDomainTypeMode.alias:
            return file.getImport(context.printer.pushTypeDeclaration({ type: 'domain', name: type.typeName }, (identifierName, file) => [
                `type ${identifierName} = ${context.getTypeScriptType(type.basetypeID, file)}${getBrand(type.typeName, context)};`,
            ]));
        case pg_config_1.PgTypesDomainTypeMode.inline:
            return `${context.getTypeScriptType(type.basetypeID, file)}${getBrand(type.typeName, context)};`;
    }
}
exports.default = printDomainType;
function getBrand(typeName, context) {
    switch (context.options.domainTypeMode) {
        case pg_config_1.PgTypesDomainTypeMode.strict_brand:
            return ` & {readonly __brand: '${typeName}'}`;
        case pg_config_1.PgTypesDomainTypeMode.loose_brand:
            return ` & {readonly __brand?: '${typeName}'}`;
        case pg_config_1.PgTypesDomainTypeMode.alias:
        case pg_config_1.PgTypesDomainTypeMode.inline:
            return '';
    }
}
//# sourceMappingURL=printDomainType.js.map