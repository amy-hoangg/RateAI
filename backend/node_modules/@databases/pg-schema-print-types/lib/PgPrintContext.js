"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const shared_print_types_1 = require("@databases/shared-print-types");
const DefaultTypeScriptMapping_1 = require("./DefaultTypeScriptMapping");
const pg_data_type_id_1 = require("@databases/pg-data-type-id");
class PgPrintContext {
    constructor(getTypeScriptType, schema, options) {
        this.printer = new shared_print_types_1.PrintContext(options);
        this.options = options;
        this._getTypeScriptType = getTypeScriptType;
        this._classes = new Map(schema.classes.map((c) => [c.classID, c]));
        this._types = new Map(schema.types.map((t) => [t.typeID, t]));
    }
    getClass(id) {
        return this._classes.get(id);
    }
    _getTypeOverride(type) {
        var _a, _b;
        return ((_b = (_a = this.options.typeOverrides[`${type.schemaName}.${type.typeName}`]) !== null && _a !== void 0 ? _a : this.options.typeOverrides[`${type.typeName}`]) !== null && _b !== void 0 ? _b : null);
    }
    getTypeScriptType(id, file) {
        var _a;
        const override = this.options.typeOverrides[id];
        if (override !== undefined) {
            return override;
        }
        if (id in pg_data_type_id_1.default) {
            const str = pg_data_type_id_1.default[id];
            const override = this.options.typeOverrides[str];
            if (override !== undefined) {
                return override;
            }
        }
        const builtin = DefaultTypeScriptMapping_1.default.get(id);
        if (builtin)
            return builtin;
        const type = this._types.get(id);
        if (!type)
            return 'string';
        return ((_a = this._getTypeOverride(type)) !== null && _a !== void 0 ? _a : this._getTypeScriptType(type, this, file));
    }
}
exports.default = PgPrintContext;
//# sourceMappingURL=PgPrintContext.js.map