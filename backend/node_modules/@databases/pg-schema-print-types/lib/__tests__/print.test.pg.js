"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pg_data_type_id_1 = require("@databases/pg-data-type-id");
const pg_schema_introspect_1 = require("@databases/pg-schema-introspect");
const PgPrintContext_1 = require("../PgPrintContext");
const getTypeScriptType_1 = require("../getTypeScriptType");
const PgPrintOptions_1 = require("../PgPrintOptions");
const printSchema_1 = require("../printers/printSchema");
const shared_print_types_1 = require("@databases/shared-print-types");
const db = (0, pg_schema_introspect_1.connect)({ bigIntMode: 'number' });
afterAll(async () => {
    await db.dispose();
});
test('getClasses', async () => {
    await db.query((0, pg_schema_introspect_1.sql) `CREATE SCHEMA print_types`);
    await db.query((0, pg_schema_introspect_1.sql) `
      CREATE TABLE print_types.users (
        id BIGSERIAL NOT NULL PRIMARY KEY,
        screen_name TEXT UNIQUE NOT NULL,
        bio TEXT,
        age INT,
        created_at TIMESTAMPTZ,
        updated_at TIMESTAMPTZ
      );
      CREATE TABLE print_types.photos (
        id BIGSERIAL NOT NULL PRIMARY KEY,
        owner_user_id BIGINT NOT NULL REFERENCES print_types.users(id),
        cdn_url TEXT NOT NULL,
        caption TEXT NULL,
        metadata JSONB NOT NULL,
        created_at TIMESTAMPTZ,
        updated_at TIMESTAMPTZ
      );
      CREATE MATERIALIZED VIEW print_types.view_a AS SELECT * FROM print_types.users;
      CREATE VIEW print_types.view_b AS SELECT * FROM print_types.photos;

      COMMENT ON TABLE print_types.photos IS 'This is a great table';
      COMMENT ON VIEW print_types.view_b IS 'This is a great view';
    `);
    const schema = await (0, pg_schema_introspect_1.default)(db, {
        schemaName: 'print_types',
    });
    const printContext = new PgPrintContext_1.default(getTypeScriptType_1.default, schema, new PgPrintOptions_1.default({
        tableTypeName: '{{ TABLE_NAME | singular | pascal-case }}',
        columnTypeOverrides: {
            'photos.cdn_url': 'string & {__brand?: "url"}',
        },
        typeOverrides: {
            [pg_data_type_id_1.default.jsonb]: 'unknown',
        },
        tableReExportFileName: null,
        tableInsertParametersReExportFileName: null,
    }));
    (0, printSchema_1.default)(schema, printContext);
    await (0, shared_print_types_1.writeFiles)({
        context: printContext.printer,
        directory: `${__dirname}/../../../pg-typed/src/__tests__/__generated__`,
        generatedStatement: 'Generated by: @databases/pg-schema-print-types',
    });
    expect(printContext.printer.getFiles()).toMatchInlineSnapshot(`
    Array [
      Object {
        "content": "import Photo, {Photos_InsertParameters} from './photos'
    import User, {Users_InsertParameters} from './users'

    interface DatabaseSchema {
      photos: {record: Photo, insert: Photos_InsertParameters};
      users: {record: User, insert: Users_InsertParameters};
    }
    export default DatabaseSchema;

    /**
     * JSON serialize values (v) if the table name (t) and column name (c)
     * is a JSON or JSONB column.
     * This is necessary if you want to store values that are not plain objects
     * in a JSON or JSONB column.
     */
    function serializeValue(t: string, c: string, v: unknown): unknown {
      if (t === \\"photos\\" && c === \\"metadata\\") {
        return JSON.stringify(v);
      }
      return v;
    }
    export {serializeValue}
    ",
        "filename": "index.ts",
      },
      Object {
        "content": "import User from './users'

    /**
     * This is a great table
     */
    interface Photo {
      caption: (string) | null
      cdn_url: string & {__brand?: \\"url\\"}
      created_at: (Date) | null
      /**
       * @default nextval('print_types.photos_id_seq'::regclass)
       */
      id: number & {readonly __brand?: 'photos_id'}
      metadata: unknown
      owner_user_id: User['id']
      updated_at: (Date) | null
    }
    export default Photo;

    /**
     * This is a great table
     */
    interface Photos_InsertParameters {
      caption?: (string) | null
      cdn_url: string & {__brand?: \\"url\\"}
      created_at?: (Date) | null
      /**
       * @default nextval('print_types.photos_id_seq'::regclass)
       */
      id?: number & {readonly __brand?: 'photos_id'}
      metadata: unknown
      owner_user_id: User['id']
      updated_at?: (Date) | null
    }
    export type {Photos_InsertParameters}
    ",
        "filename": "photos.ts",
      },
      Object {
        "content": "interface User {
      age: (number) | null
      bio: (string) | null
      created_at: (Date) | null
      /**
       * @default nextval('print_types.users_id_seq'::regclass)
       */
      id: number & {readonly __brand?: 'users_id'}
      screen_name: string
      updated_at: (Date) | null
    }
    export default User;

    interface Users_InsertParameters {
      age?: (number) | null
      bio?: (string) | null
      created_at?: (Date) | null
      /**
       * @default nextval('print_types.users_id_seq'::regclass)
       */
      id?: number & {readonly __brand?: 'users_id'}
      screen_name: string
      updated_at?: (Date) | null
    }
    export type {Users_InsertParameters}
    ",
        "filename": "users.ts",
      },
      Object {
        "content": "[
      {
        \\"name\\": \\"photos\\",
        \\"columns\\": [
          {
            \\"name\\": \\"caption\\",
            \\"isNullable\\": true,
            \\"hasDefault\\": false,
            \\"typeId\\": 25,
            \\"typeName\\": \\"TEXT\\"
          },
          {
            \\"name\\": \\"cdn_url\\",
            \\"isNullable\\": false,
            \\"hasDefault\\": false,
            \\"typeId\\": 25,
            \\"typeName\\": \\"TEXT\\"
          },
          {
            \\"name\\": \\"created_at\\",
            \\"isNullable\\": true,
            \\"hasDefault\\": false,
            \\"typeId\\": 1184,
            \\"typeName\\": \\"TIMESTAMPTZ\\"
          },
          {
            \\"name\\": \\"id\\",
            \\"isNullable\\": false,
            \\"hasDefault\\": true,
            \\"typeId\\": 20,
            \\"typeName\\": \\"BIGINT\\"
          },
          {
            \\"name\\": \\"metadata\\",
            \\"isNullable\\": false,
            \\"hasDefault\\": false,
            \\"typeId\\": 3802,
            \\"typeName\\": \\"JSONB\\"
          },
          {
            \\"name\\": \\"owner_user_id\\",
            \\"isNullable\\": false,
            \\"hasDefault\\": false,
            \\"typeId\\": 20,
            \\"typeName\\": \\"BIGINT\\"
          },
          {
            \\"name\\": \\"updated_at\\",
            \\"isNullable\\": true,
            \\"hasDefault\\": false,
            \\"typeId\\": 1184,
            \\"typeName\\": \\"TIMESTAMPTZ\\"
          }
        ]
      },
      {
        \\"name\\": \\"users\\",
        \\"columns\\": [
          {
            \\"name\\": \\"age\\",
            \\"isNullable\\": true,
            \\"hasDefault\\": false,
            \\"typeId\\": 23,
            \\"typeName\\": \\"INTEGER\\"
          },
          {
            \\"name\\": \\"bio\\",
            \\"isNullable\\": true,
            \\"hasDefault\\": false,
            \\"typeId\\": 25,
            \\"typeName\\": \\"TEXT\\"
          },
          {
            \\"name\\": \\"created_at\\",
            \\"isNullable\\": true,
            \\"hasDefault\\": false,
            \\"typeId\\": 1184,
            \\"typeName\\": \\"TIMESTAMPTZ\\"
          },
          {
            \\"name\\": \\"id\\",
            \\"isNullable\\": false,
            \\"hasDefault\\": true,
            \\"typeId\\": 20,
            \\"typeName\\": \\"BIGINT\\"
          },
          {
            \\"name\\": \\"screen_name\\",
            \\"isNullable\\": false,
            \\"hasDefault\\": false,
            \\"typeId\\": 25,
            \\"typeName\\": \\"TEXT\\"
          },
          {
            \\"name\\": \\"updated_at\\",
            \\"isNullable\\": true,
            \\"hasDefault\\": false,
            \\"typeId\\": 1184,
            \\"typeName\\": \\"TIMESTAMPTZ\\"
          }
        ]
      }
    ]
    ",
        "filename": "schema.json",
      },
    ]
  `);
});
//# sourceMappingURL=print.test.pg.js.map